unit NewLibrary_Async;

{----------------------------------------------------------------------------}
{ This unit was automatically generated by the RemObjects SDK after reading  }
{ the RODL file associated with this project .                               }
{                                                                            }
{ Do not modify this unit manually, or your changes will be lost when this   }
{ unit is regenerated the next time you compile the project.                 }
{----------------------------------------------------------------------------}

{$I RemObjects.inc}

interface

uses
  {vcl:} Classes, TypInfo,
  {RemObjects:} uROXMLIntf, uROClasses, uROTypes, uROClientIntf, uROAsync,
  {Project:} NewLibrary_Intf;

type
  TSeekOrigin = Classes.TSeekOrigin; // fake declaration
  { IStockInfoWSSoap_Async }
  IStockInfoWSSoap_Async = interface(IROAsyncInterface)
    ['{B6651F57-9AF8-4B87-BA10-6307F0BEFF12}']
    procedure Invoke_getStockInfo(const getStockInfo: getStockInfo);
    function Retrieve_getStockInfo: getStockInfoResponse;
  end;

  { IStockInfoWSSoap12_Async }
  IStockInfoWSSoap12_Async = interface(IROAsyncInterface)
    ['{57C855A3-023F-4882-8D43-561E7AFB2550}']
    procedure Invoke_getStockInfo(const getStockInfo: getStockInfo);
    function Retrieve_getStockInfo: getStockInfoResponse;
  end;

  { CoStockInfoWSSoap_Async }
  CoStockInfoWSSoap_Async = class
    class function Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IStockInfoWSSoap_Async;
  end;

  { CoStockInfoWSSoap12_Async }
  CoStockInfoWSSoap12_Async = class
    class function Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IStockInfoWSSoap12_Async;
  end;

  { TStockInfoWSSoap_AsyncProxy }
  TStockInfoWSSoap_AsyncProxy = class(TROAsyncProxy, IStockInfoWSSoap_Async)
  private
  protected
    function __GetInterfaceName:string; override;

    procedure Invoke_getStockInfo(const getStockInfo: getStockInfo);
    function Retrieve_getStockInfo: getStockInfoResponse;
  end;

  { TStockInfoWSSoap12_AsyncProxy }
  TStockInfoWSSoap12_AsyncProxy = class(TROAsyncProxy, IStockInfoWSSoap12_Async)
  private
  protected
    function __GetInterfaceName:string; override;

    procedure Invoke_getStockInfo(const getStockInfo: getStockInfo);
    function Retrieve_getStockInfo: getStockInfoResponse;
  end;

implementation

uses
  {vcl:} SysUtils, uROClient;

{ CoStockInfoWSSoap }

class function CoStockInfoWSSoap_Async.Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IStockInfoWSSoap_Async;
begin
  result := TStockInfoWSSoap_AsyncProxy.Create(aMessage, aTransportChannel);
end;

{ TStockInfoWSSoap_AsyncProxy }

function TStockInfoWSSoap_AsyncProxy.__GetInterfaceName:string;
begin
  result := 'StockInfoWSSoap';
end;

procedure TStockInfoWSSoap_AsyncProxy.Invoke_getStockInfo(const getStockInfo: getStockInfo);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('getStockInfo');

    lMessage.SetAttributes(lTransportChannel, ['Action', 'Location', 'remap_getStockInfo', 'Style', 'TargetNamespace', 'Type', 'Use'
      , 'Wsdl'], 
      ['http://webxml.com.cn/getStockInfo', 'http://webservice.webxml.com.cn/WebServices/StockInfoWS.asmx', 'http://webxml.com.cn/getStockInfo', 'document', TargetNamespace, 'SOAP', 'literal'
      , WSDLLocation]);
    lMessage.InitializeRequestMessage(lTransportChannel, 'NewLibrary', __InterfaceName, 'getStockInfo');
    lMessage.Write('getStockInfo', TypeInfo(getStockInfo), getStockInfo, []);
    __DispatchAsyncRequest('getStockInfo',lMessage);
    lMessage.UnsetAttributes(lTransportChannel);
  finally
    lTransportChannel := nil;
    lMessage := nil;
  end;
end;

function TStockInfoWSSoap_AsyncProxy.Retrieve_getStockInfo: getStockInfoResponse;
var
  __response:TStream;
  tc:TROTransportChannel;
  lRetry:Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    result := nil;
    __response := __RetrieveAsyncResponse('getStockInfo');
    try
      try
        lMessage.ReadFromStream(__response);

        lMessage.Read('getStockInfoResponse', TypeInfo(getStockInfoResponse), Result, []);

      except
        on E: EROSessionNotFound do begin
          tc := TROTransportChannel(lTransportChannel.GetTransportObject);
          lRetry := False;
          if assigned(tc.OnLoginNeeded) then tc.OnLoginNeeded(tc, e, lRetry);
          if not lRetry then raise;
        end;
        on E: Exception do raise;
      end;
    finally
      __response.Free();
    end;
  finally
    lTransportChannel := nil;
    lMessage := nil;
  end;
end;


{ CoStockInfoWSSoap12 }

class function CoStockInfoWSSoap12_Async.Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IStockInfoWSSoap12_Async;
begin
  result := TStockInfoWSSoap12_AsyncProxy.Create(aMessage, aTransportChannel);
end;

{ TStockInfoWSSoap12_AsyncProxy }

function TStockInfoWSSoap12_AsyncProxy.__GetInterfaceName:string;
begin
  result := 'StockInfoWSSoap12';
end;

procedure TStockInfoWSSoap12_AsyncProxy.Invoke_getStockInfo(const getStockInfo: getStockInfo);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('getStockInfo');

    lMessage.SetAttributes(lTransportChannel, ['Action', 'Location', 'remap_getStockInfo', 'Style', 'TargetNamespace', 'Type', 'Use'
      , 'Wsdl'], 
      ['http://webxml.com.cn/getStockInfo', 'http://webservice.webxml.com.cn/WebServices/StockInfoWS.asmx', 'http://webxml.com.cn/getStockInfo', 'document', TargetNamespace, 'SOAP', 'literal'
      , WSDLLocation]);
    lMessage.InitializeRequestMessage(lTransportChannel, 'NewLibrary', __InterfaceName, 'getStockInfo');
    lMessage.Write('getStockInfo', TypeInfo(getStockInfo), getStockInfo, []);
    __DispatchAsyncRequest('getStockInfo',lMessage);
    lMessage.UnsetAttributes(lTransportChannel);
  finally
    lTransportChannel := nil;
    lMessage := nil;
  end;
end;

function TStockInfoWSSoap12_AsyncProxy.Retrieve_getStockInfo: getStockInfoResponse;
var
  __response:TStream;
  tc:TROTransportChannel;
  lRetry:Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    result := nil;
    __response := __RetrieveAsyncResponse('getStockInfo');
    try
      try
        lMessage.ReadFromStream(__response);

        lMessage.Read('getStockInfoResponse', TypeInfo(getStockInfoResponse), Result, []);

      except
        on E: EROSessionNotFound do begin
          tc := TROTransportChannel(lTransportChannel.GetTransportObject);
          lRetry := False;
          if assigned(tc.OnLoginNeeded) then tc.OnLoginNeeded(tc, e, lRetry);
          if not lRetry then raise;
        end;
        on E: Exception do raise;
      end;
    finally
      __response.Free();
    end;
  finally
    lTransportChannel := nil;
    lMessage := nil;
  end;
end;


initialization
end.
